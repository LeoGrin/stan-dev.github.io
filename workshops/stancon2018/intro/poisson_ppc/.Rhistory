devtools::install_github("stan-dev/rstanarm", args = "--preclean")
devtools::install_github("stan-dev/rstanarm", args = "--preclean")
example(pp_check.stanreg, package = "rstanarm")
?pp_check.stanreg
install.packages("rstanarm", type = "source")
example()
example(pp_check.stanreg, package = "rstanarm")
example(pp_check.stanreg, package = "rstanarm")
library(rstan)
fit <- stan_demo("birats")
devtools::install_github("stan-dev/rstanarm", args = "--preclean")
example(pp_check.stanreg, package = "rstanarm")
example(pp_check.stanreg, package = "rstanarm")
?devtools::install_local
getwd()
devtools::install_local(path = "/Users/jgabry/Documents/Stan/clang4rstanarm_2.15.4.tgz")
devtools::install_local(path = "/Users/jgabry/Documents/Stan/clang4rstanarm_2.15.4.tgz")
install.packages("/Users/jgabry/Documents/Stan/clang4rstanarm_2.15.4.tgz", repos = NULL)
install.packages("rstanarm", type = "source")
?stan_glm
library(rstanarm)
?bayesplot::mcmc_nuts_divergence
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
# this combo of prior and adapt_delta should lead to some divergences
prior = hs(global_scale = 20),
adapt_delta = 0.5
)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
# this combo of prior and adapt_delta should lead to some divergences
prior = hs(global_scale = 20),
adapt_delta = 0.5,
seed = 1
)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
prior = hs(global_scale = 20),
adapt_delta = 0.5,
seed = 1
)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30)
fit <- stan_glm(mpg ~ ., data = mtcars, iter = 30)
fit <- stan_glm(mpg ~ wt, data = mtcars, iter = 30)
fit <- stan_glm(mpg ~ wt, data = mtcars, iter = 30)
fit <- stan_glm(mpg ~ wt, data = mtcars, iter = 30)
fit <- stan_glm(mpg ~ wt, data = mtcars)
devtools::install_github("stan-dev/rstanarm", args = "--preclean")
library(rstanarm)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
prior = hs(global_scale = 20),
adapt_delta = 0.5,
seed = 1
)
fit <- stan_glm(mpg ~ wt, data = mtcars)
install.packages("rstanarm", type = "source")
library(rstanarm)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
prior = hs(global_scale = 20),
adapt_delta = 0.5,
seed = 1
)
devtools::install_github("stan-dev/rstanarm", args = "--preclean")
library(rstanarm)
fit <- stan_glm(
mpg ~ ., data = mtcars,
iter = 30,
prior = hs(global_scale = 20),
adapt_delta = 0.5,
seed = 1
)
library(rstan)
funnel <- stan_demo("funnel")
install.packages("rstan", type = "source")
library(rstan)
funnel <- stan_demo("funnel")
birats <- stan_demo("birats")
funnel <- stan_demo("funnel", refresh = 1000)
library(rstan)
funnel <- stan_demo("funnel", chains = 1)
funnel <- stan_demo("funnel", chains = 1)
birats <- stan_demo("birats", chains = 1)
devtools::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan")
packageVersion(
"StanHeaders"
)
path_rstan <- tempfile(pattern = "git2r-")
git2r::clone("http://github.com/stan-dev/rstan", path_rstan, branch = "develop")
git2r::clone("http://github.com/stan-dev/stan",
file.path(path_rstan, "StanHeaders", "inst", "include", "upstream"),
branch = "develop") # may want to change this branch
git2r::clone("http://github.com/stan-dev/math",
file.path(path_rstan, "StanHeaders", "inst", "include", "mathlib"),
branch = "develop") # may want to change this branch
devtools::install(file.path(path_rstan, "StanHeaders"), args = "--preclean")
packageVersion("StanHeaders")
library(rstan)
funnel <- stan_demo("funnel", chains = 1)
birats <- stan_demo("birats", chains = 1)
funnel <- stan_demo("funnel", chains = 4)
birats <- stan_demo("birats", chains = 4)
schools <- stan_demo("eight_schools")
library(rstanarm)
fit <- stan_glm(mpg ~ wt, data = mtcars)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
library("rstan")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default())
qplot(y)
source("count-data.R")
print(N)
print(y)
qplot(y)
qplot(x)
x <- rpois(N, lambda = mean(y))
qplot(x)
plotdata <- data.frame(
value = c(y, x),
variable = rep(c("Our data", "Poisson data"), each = N)
)
plotdata <- data.frame(
value = c(y, x),
variable = rep(c("Our data", "Poisson data"), each = N)
)
ggplot(plotdata, aes(x = value, color = variable)) +
geom_freqpoly(binwidth = 0.5) +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_color_manual(name = "", values = c("gray30", "purple"))
fit <- stan("poisson-simple.stan", data = c("y", "N"))
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
library("rstan")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default())
# Loads vector of counts 'y'
source("count-data.R")
N <- length(y)
print(N)
print(y)
qplot(y)
qplot(y, geom = "count")
qplot(y, geom = "col")
qplot(y)
ggplot(plotdata, aes(x = value, color = variable)) +
geom_bar()
plotdata <- data.frame(
value = c(y, x),
variable = rep(c("Our data", "Poisson data"), each = N)
)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
library("rstan")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default())
# Loads vector of counts 'y'
source("count-data.R")
N <- length(y)
print(N)
print(y)
qplot(y)
x <- rpois(N, lambda = mean(y))
qplot(x)
plotdata <- data.frame(
value = c(y, x),
variable = rep(c("Our data", "Poisson data"), each = N)
)
ggplot(plotdata, aes(x = value, color = variable)) +
geom_bar()
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar()
geom_bar
?geom_bar
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge")
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y))
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y))
scale_color_manual(name = "", values = c("gray30", "purple"))
qplot(y)
qplot(y, breaks = 1:max(y))
qplot(y)
qplot(y, breaks = 0:max(y))
qplot(y, labels = 0:max(y))
qplot(y)
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y))
scale_color_manual(name = "", values = c("gray30", "purple"))
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_color_manual(name = "", values = c("gray30", "purple"))
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_fill_manual(name = "", values = c("gray30", "purple"))
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
library("rstan")
library("ggplot2")
library("bayesplot")
theme_set(bayesplot::theme_default())
# Loads vector of counts 'y'
source("count-data.R")
N <- length(y)
print(N)
print(y)
qplot(y)
x <- rpois(N, lambda = mean(y))
qplot(x)
plotdata <- data.frame(
value = c(y, x),
variable = rep(c("Our data", "Poisson data"), each = N)
)
# Frequency polygons
ggplot(plotdata, aes(x = value, color = variable)) +
geom_freqpoly(binwidth = 0.5) +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_color_manual(name = "", values = c("gray30", "purple"))
# Side by side bar plots
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_bar(position = "dodge") +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_fill_manual(name = "", values = c("gray30", "purple"))
writeLines(readLines("poisson-simple.stan"))
fit <- stan("poisson-simple.stan", data = list(N = N, y = y))
print(fit)
color_scheme_set("brightblue") # check out ?bayesplot::color_scheme_set
lambda_draws <- as.matrix(fit, pars = "lambda")
mcmc_areas(lambda_draws, prob = 0.8) # color 80% interval
means <- c("Posterior mean" = mean(lambda_draws), "Data mean" = mean(y))
print(means, digits = 3)
y_rep <- as.matrix(fit, pars = "y_rep")
# number of rows = number of post-warmup posterior draws
# number of columns = length(y)
dim(y_rep)
ppc_hist(y, y_rep[1:8, ], binwidth = 1)
ppc_dens_overlay(y, y_rep[1:50, ])
prop_zero <- function(x) mean(x == 0)
print(prop_zero(y))
ppc_stat(y, y_rep, stat = "prop_zero")
ppc_stat_2d(y, y_rep, stat = c("mean", "sd"))
ppc_error_hist(y, y_rep[1:4, ], binwidth = 1) +
xlim(-15, 15) +
vline_0()
writeLines(readLines("poisson-hurdle.stan"))
fit2 <- stan("poisson-hurdle.stan", data = c("y", "N"))
print(fit2, pars = c("lambda", "theta"))
lambda_draws2 <- as.matrix(fit2, pars = "lambda")
lambdas <- cbind(lambda_fit1 = lambda_draws[, 1],
lambda_fit2 = lambda_draws2[, 1])
color_scheme_set("red")
mcmc_areas(lambdas, prob = 0.8) # color 80% interval
y_rep2 <- as.matrix(fit2, pars = "y_rep")
ppc_hist(y, y_rep2[1:8, ], binwidth = 1)
ppc_dens_overlay(y, y_rep2[1:50, ])
ppc_stat(y, y_rep2, stat = "prop_zero")
ppc_stat_2d(y, y_rep2, stat = c("mean", "sd"))
ppc_error_hist(y, y_rep2[sample(nrow(y_rep2), 4), ], binwidth = 1) +
xlim(-15, 15) +
vline_0()
library(loo)
log_lik1 <- extract_log_lik(fit)
(loo1<-loo(log_lik1))
log_lik2 <- extract_log_lik(fit2)
(loo2<-loo(log_lik2))
compare(loo1,loo2)
rstan:::rstudio_stanc("poisson-simple.stan")
rstan:::rstudio_stanc("poisson-simple.stan")
ggplot(plotdata, aes(x = value, fill = variable)) +
geom_freqpoly(binwidth = 0.5) +
scale_x_continuous(name = "", breaks = 0:max(x,y)) +
scale_fill_manual(name = "", values = c("gray30", "purple"))
library(loo)
?loo
LLarr <- example_loglik_array()
rel_n_eff <- relative_eff(exp(LLarr))
loo(LLarr, r_eff = rel_n_eff, cores = 2)
LLarr <- example_loglik_array()
rel_n_eff <- relative_eff(exp(LLarr))
loo(LLarr, r_eff = rel_n_eff, cores = 2)
l1 <- loo(LLarr, r_eff = rel_n_eff, cores = 2)
print(l1)
l1$diagnostics$pareto_k[1:10] <- 0.9
l1
l1$diagnostics$pareto_k <- runif(32, 0, 1.2)
l1
library(rstanarm)
fit <- stan_glm(mpg ~ ., data = mtcars, prior = hs(), iter = 1000)
loo(fit)
loo(log_lik(fit))
